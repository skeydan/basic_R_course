- Class: meta
  Course: basic_R
  Lesson: subsetting
  Author: Sigrid Keydana
  Type: Standard
  Organization: Trivadis
  Version: 2.4.2

#1
- Class: text
  Output: Now that we've covered compound data structures, we need to know how to access items (or subsets) of these structures.
   
#2
- Class: text
  Output: Again, we'll start with the vector.
  
#3
- Class: text
  Output: You can access specific items using brackets. Inside the brackets, a vector(!) of indices tells R which elements you want.

#4
- Class: text
  Output: Indexing starts at 1. To access the first item, type myvector[1].
    
#5
- Class: text
  Output: To access elements 1 to 5 (that is, consecutive elements), type myvector[1:5].  
  
#6
- Class: text
  Output: To access elements 1 and 5 (which aren't consecutive), type myvector[c(1,5)]. 
 
#7
- Class: cmd_question
  Output:  Create a vector of numbers from 10 to 20 and assign it to myvector.
  AnswerTests: omnitest('myvector <- 10:20')
  Hint: Just type myvector <- 10:20.
  
#8
- Class: cmd_question
  Output:  Now, extract the last two elements from this vector.
  AnswerTests: any_of_exprs('myvector[c(10,11)]','myvector[10:11]', 'myvector[-1:-9]')
  Hint: Just type myvector[10:11].
  
#9
- Class: text
  Output:  You can also use the minus sign to indicate which elements you don't want. For example, to see all but the first element, you'd type myvector[-1].
  
#10
- Class: text
  Output: Let's move on to subsetting lists now.

#11
- Class: text
  Output:  With lists, there's a distinction between extracting sublists and extracting single elements.
    To extract a sublist, use single brackets. To extract a single element, use double brackets.
  
#12
- Class: cmd_question
  Output: Now first create a nested list, called mylist, to play around with.
    It's first element should be the vector of uppercase letters from A to D. 
    The second element should be a vector of ones of length 10 (hint - the rep(<what>, <how often>) function is a comfortable way to create vectors of repeating elements.)
    The last element should be just the number 7777.
  AnswerTests: any_of_exprs('mylist <- list(LETTERS[1:4], rep(1,10), 7777)',"mylist <- list(c('A','B','C','D'), rep(1,10), 7777)")
  Hint: Just type mylist <- list(LETTERS[1:4], rep(1,10), 7777).    
  
#13
- Class: cmd_question
  Output: Now, please extract the number 7777. (No need to store it in a variable.)
  AnswerTests: omnitest(' mylist[[3]]')
  Hint: Just type  mylist[[3]].   
  
#14
- Class: cmd_question
  Output: So even if the third element consists of just one item, we have to use double bracket syntax to get out the item (and not the sublist).
    For comparison, use single brackets now to extract the sublist with single element 7777.
  AnswerTests: omnitest('mylist[3]')
  Hint: Just type  mylist[3].   

#15  
- Class: cmd_question
  Output: To make things even clearer, compare the object types for both cases (using typeof()). To see everything at once, concatenate both function calls in a vector. 
  AnswerTests: omnitest('c(typeof(mylist[[3]]), typeof(mylist[3]))')
  Hint: Just type c(typeof(mylist[[3]]), typeof(mylist[3])). 

#16  
- Class: cmd_question
  Output: Now, try extracting the B from the list.
  AnswerTests: any_of_exprs('mylist[[1]][[2]]', 'mylist[[1]][2]')
  Hint: Just type c(typeof(mylist[[3]]), typeof(mylist[3])). 

#17  
- Class: cmd_question
  Output: What do you think will happen if you try to extract an element that does not exist?
    It will throw a subscript out of bounds error.
    However, if you assign to a non-existing index position, this will just add a new element to the list.
    Assign the string "thisdidnotexistbefore" to position 5 of the list now.
  AnswerTests: any_of_exprs('mylist[[5]] <- "thisdidnotexistbefore"','mylist[5] <- "thisdidnotexistbefore"')
  Hint: Just type mylist[[5]] <- "thisdidnotexistbefore". 
  
#18
- Class: cmd_question
  Output: What do you think will have happened to position 4 of the list? Just have a look - print the list.
  AnswerTests: any_of_exprs('mylist','print(mylist)')
  Hint: Just type mylist.   
  
#19
- Class: cmd_question
  Output: OK. So the missing element is NULL.
    Now remember that lists may also be named? In that case, you can access a value by it's key, as well.
    Let's reuse our existing mylist, but let's name the elements first. I suggest you name them "first", "second", etc., until "fifth".
  AnswerTests: omnitest('names(mylist) <- c("first", "second", "third", "fourth", "fifth")')
  Hint: Just type names(mylist) <- c("first", "second", "third", "fourth", "fifth").  
  
#20
- Class: cmd_question
  Output: Now use the key to access the first element. (Just the element, not the sublist.)
  AnswerTests: omnitest('mylist[["first"]]')
  Hint: Just type names(mylist) <- c("first", "second", "third", "fourth", "fifth").  


#21
- Class: cmd_question
  Output: If you wanted to extract an element from that vector now, you'd have to use indexing by position because the letters in the vector are not named.
    How about you name them, now? The values are the (uppercase) letters from A to D, so why not name with the corresponding lowercase letters?
  AnswerTests: any_of_exprs("names(mylist[['first']]) <- c('a','b','c','d')","names(mylist[['first']]) <- letters[1:4]")
  Hint: Just type names(mylist[["first"]]) <- c('a','b','c','d'). 
  
#22
- Class: cmd_question
  Output: So now you can use key syntax to access the C. Do it now.
  AnswerTests: omnitest('mylist[["first"]][["c"]]')
  Hint: Just type mylist[["first"]][["c"]].  
  
#23
- Class: text
  Output: That's it for lists. The next data type we introduced was matrices.
  
#24
- Class: cmd_question
  Output: Can you please create the matrix m? Type m <- matrix(1:12, 2,6). 
  AnswerTests: omnitest('m <- matrix(1:12, 2,6)')
  Hint: Just type m <- matrix(1:12, 2,6).    
  
#25
- Class: text
  Output: With a matrix, to extract a row n (keeping all columns), you'd type m[n, ].
    Conversely, to keep all rows but just extract a single column, you'd type m[ ,n].
    To extract more than one column (or row, respectively) you'd concatenate the [row|column] indices.
    
#26
- Class: cmd_question
  Output: Try extracting the first 2 columns of m now. 
  AnswerTests: any_of_exprs('m[, 1:2]','m[,c(1,2)]')
  Hint: Just type m[, 1:2]. 
    
#27
- Class: cmd_question
  Output: Imagine you wanted to see all but the third column. You could you the "minus syntax" for that.
  AnswerTests: omnitest('m[, -3]')
  Hint: Just type m[, -3]. 
  
#28
- Class: cmd_question
  Output: Of course, instead of extracting rows or columns, you might want to extract single elements.
    In that case, you'd specify m[r,c] to access the element in row r, column c.
    So, extract the sixth element in row 2 now.
  AnswerTests: omnitest('m[2,6]')
  Hint: Just type m[2,6].  

#29
- Class: text
  Output: We'll now see that with data.frame, it works quite similarly, just that in this case, you might also want to use column names instead of indices.
    
#30
- Class: cmd_question
  Output: Start by loading the diamonds dataset now. It is in the ggplot2 library so we need to do library(ggplot2) first.
  AnswerTests: omnitest('library(ggplot2)')
  Hint: Just type library(ggplot2).     
    
#31
- Class: cmd_question
  Output: Next, load the diamonds dataset.
  AnswerTests: omnitest('data("diamonds")')
  Hint: Just type data("diamonds").  
  
#32
- Class: cmd_question
  Output: Look at the beginning of the dataframe to get an impression what it's about..
  AnswerTests: omnitest('head(diamonds)')
  Hint: Just type head(diamonds).  
  
#33
- Class: cmd_question
  Output: Now say we want to extract row 2, columns cut and depth. Do this using indexing, as with the matrices.
  AnswerTests: any_of_exprs('diamonds[2,c(2,5)]',"diamonds[2,c('cut','depth')]")
  Hint: Just type diamonds[2,c(2,5)].  
  
#34
- Class: cmd_question
  Output: You could also have used column names. Do this now.
  AnswerTests: omnitest("diamonds[2,c('cut','depth')]")
  Hint: Just type diamonds[2,c('cut','depth')].
  
#35
- Class: cmd_question
  Output: Now say you want to extract a complete column. You can use the bracket syntax with the column names, as with lists.
    And as with lists, there's a difference whether you use double brackets or single brackets.
    Extract clarity now, using single brackets, please.
  AnswerTests: omnitest("diamonds['clarity']")
  Hint: Just type diamonds['clarity'].
  
#36
- Class: cmd_question
  Output: What you got here - even though you extracted one column - is still a dataframe.
    Just now it is a dataframe with one column. If you want the column contents as a vector, what do you do?
  AnswerTests: omnitest("diamonds[['clarity']]")
  Hint: Just type diamonds[['clarity']].
  
#37
- Class: cmd_question
  Output: If you want the vector, there's an alternative syntax - <dataframe>$<column_name>.
    Use this syntax now to extract the price column.
  AnswerTests: omnitest('diamonds$price')
  Hint: Just type diamonds$price.
  
#38
- Class: cmd_question
  Output: As the last thing we'll do with data.frames, for now, extract the 5th element of the carat column.
    Use the  <dataframe>$<column_name> syntax for this.
  AnswerTests: omnitest('diamonds$carat[5]')
  Hint: Just type diamonds$carat[5].  
  
  
#39
- Class: text
  Output: Now there's still one data type we need to know how to extract elements of...
   
#40   
- Class: cmd_question
  Output: ... the array. Let's start by creating the array a. Just type a <- array(1:64, dim = c(2,8,4))
  AnswerTests: omnitest(' a <- array(1:64, dim = c(2,8,4))')
  Hint: Just type  a <- array(1:64, dim = c(2,8,4)).  

#41  
- Class: cmd_question
  Output: How do you think you can access the element that has position 1 in the first dimension ("row"), position 2 in the second ("column"), and is in the last position in dimension 3?
  AnswerTests: omnitest('a[1,2,4]')
  Hint: Just type  a[1,2,4].  
  
#42
- Class: text
  Output: OK, that's it with subsetting! We move on now to a very important topic less known to programmers of more mainstream languages - vectorization.
    (OK, that depends on what you call mainstream. If you use e.g. Python with numpy, you get to take advantage of vectorization, too.)
